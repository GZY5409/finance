import ccxt
import time
import talib
import numpy as np

bitmex = ccxt.bitmex({
    'apiKey': 'fw8sCTwqzKadf2iUtN2VlweC',
    'secret': '_vT9GeGOb_2hHufAkuVS_D4nZw9hGpzkMJhRJd13u08Wsgp9',
})

bitmex.urls['api'] = bitmex.urls['test']

limit = 100

params = {
    # 'startTime': '2018-09-10T08:04:15',
    # 'endTime': '2018-09-13T08:04:15',
    'partial': False
}

# 获取市场实时行情
def time_market():

    markets = bitmex.public_get_instrument({
        'symbol': 'XBTUSD',
    })

    for item in markets:
        print('实际价%s标记价%s时间%s' % (item['lastPrice'], item['markPrice'], item['timestamp']))

# 获取实时K线数据
def get_data():

    data_list = []

    since = bitmex.milliseconds() - limit * 60 * 500  # 获取当前时间减去要求的时间

    ohlcv = bitmex.fetch_ohlcv(symbol='BTC/USD', timeframe='1m', since=since, params=params)
    # 获取最近20分钟收盘价在列表中
    for item in ohlcv:
        data_list.append(item[4])
    # 将k线图信息转化为数组
    close_list = np.array(data_list)

    num_ohlcv = len(ohlcv)
    # 打印获取的最近1分钟K线信息
    print('{}: O: {} H: {} L:{} C:{}'.format(
            time.strftime('"%Y-%m-%d %H:%M:%S"', time.localtime(ohlcv[num_ohlcv - 1][0] / 1000)),
            ohlcv[num_ohlcv - 1][1],
            ohlcv[num_ohlcv - 1][2],
            ohlcv[num_ohlcv - 1][3],
            ohlcv[num_ohlcv - 1][4]))


    return close_list


# 转化并获取指标数据
def create_RSI(close_list):

    real = talib.RSI(close_list, timeperiod=7)
    print('当前RSI值：%s' % real[-1])
    return real[-1]


# 获取当前仓位信息
def user_position():

    position = bitmex.private_get_position()

    if position[0]['isOpen']:

        print('USD:%s BTC:%s 标记价:%s 开仓均价:%s' % (position[0]['currentQty'], position[0]['currentCost'], position[0]['markPrice'], position[0]['avgEntryPrice']))
        if position[0]['currentQty'] < 0:

            return -1
        elif position[0]['currentQty'] > 0:

            return 1
    else:
        return 0


# 获取市场交易信号
def order_signal(rsi, pos):
    # 判断仓位，再判断交易信号
    if pos == 0:
        if rsi >= 80:

            return -1

        elif rsi <= 20:

            return 1
        else:

            return 0
    elif pos == 1:

        if rsi >= 60:

            return -1
        else:

            return 0
    elif pos == -1:

        if rsi <= 40:

            return 1
        else:

            return 0

# 开仓函数
def order_create_system(signal):

    if signal == 1:
        order = bitmex.create_order(symbol='BTC/USD', type='market', side='Buy', amount=100)
        print('下单买多成功! price:%s amount:%s' % (order['price'], order['amount']))
    elif signal == -1:
        order1 = bitmex.create_order(symbol='BTC/USD', type='market', side='Sell', amount=100)
        print('下单卖空成功！price:%s amount:%s' % (order1['price'], order1['amount']))
    elif signal == 0:
        print('等待时机开仓！！！')


# 平仓函数
def close_position(signal):
    # 多头平仓
    if signal == -1:
        c_position = bitmex.create_order(symbol='BTC/USD', type='market', side='Sell', amount=100)
        print('多头平仓成功! price:%s amount:%s' % (c_position['price'], c_position['amount']))
    elif signal == 1:
        c_position = bitmex.create_order(symbol='BTC/USD', type='market', side='Buy', amount=100)
        print('空头平仓成功! price:%s amount:%s' % (c_position['price'], c_position['amount']))
    else:
        print('等待时机平仓!')


if __name__ == '__main__':

    while True:
        print('--------------------start--------------------')
        # 获取实时市场信息
        time_market()
        # 获取实时市场K线数据并转化为数组
        close_list = get_data()
        # 将K线数组转化为技术指标
        rsi = create_RSI(close_list)
        # 获取当前仓位信息
        pos = user_position()

        if pos == 0:  # 空仓状态下
            print('空仓')
            signal = order_signal(rsi, pos)
            order_create_system(signal)

        elif pos == 1:  # 持有多仓
            print('正在持有多头头寸')
            signal = order_signal(rsi, pos)
            close_position(signal)

        elif pos == -1:  # 持有空仓
            print('正在持有空头头寸')
            signal = order_signal(rsi, pos)
            close_position(signal)

        print('-----------------------end------------------------')
        time.sleep(bitmex.rateLimit * 5 / 1000)

